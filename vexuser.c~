xc#include <stdlib.h>

#include "ch.h"                 // needs for all ChibiOS programs
#include "hal.h"                // hardware abstraction layer header
#include "vex.h"                // vex library header

#define MotorDriveWheelLF     kVexMotor_1
#define MotorDriveWheelLB     kVexMotor_2
#define MotorDriveWheelRF     kVexMotor_3
#define MotorDriveWheelRB     kVexMotor_4
#define MotorDriveForkliftL   kVexMotor_5
#define MotorDriveForkliftR   kVexMotor_6
#define MotorDriveForkliftTR  kVexMotor_7
#define MotorDriveForkliftTL  kVexMotor_8
#define MotorDriveWheelBack   kVexMotor_9
#define HYSTERISIS 20


// Digi IO configuration
static  vexDigiCfg  dConfig[kVexDigital_Num] = {
        { kVexDigital_1,    kVexSensorDigitalOutput, kVexConfigOutput,      0 },
        { kVexDigital_2,    kVexSensorDigitalOutput, kVexConfigOutput,      0 },
        { kVexDigital_3,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_4,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_5,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_6,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_7,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_8,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_9,    kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_10,   kVexSensorDigitalInput,  kVexConfigInput,       0 },  
        { kVexDigital_11,   kVexSensorDigitalInput,  kVexConfigInput,       0 },
        { kVexDigital_12,   kVexSensorDigitalInput,  kVexConfigInput,       0 }
};

static  vexMotorCfg mConfig[kVexMotorNum] = {
        { kVexMotor_1,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_1 },
        { kVexMotor_2,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_2 },
        { kVexMotor_3,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_3 },
        { kVexMotor_4,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_4 },
        { kVexMotor_5,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_5 },
        { kVexMotor_6,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_6 },
        { kVexMotor_7,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_7 },
        { kVexMotor_8,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_8 },
        { kVexMotor_9,      kVexMotor393T,           kVexMotorNormal,       kVexSensorIME,         kImeChannel_8 }
};

void
vexUserSetup()
{
        vexDigitalConfigure( dConfig, DIG_CONFIG_SIZE( dConfig ) );
        vexMotorConfigure( mConfig, MOT_CONFIG_SIZE( mConfig ) );
}

void
vexUserInit()
{

}

msg_t
vexAutonomous( void *arg )
{
  (void)arg;

  // Must call this
  vexTaskRegister("auton");

  while(1)
  {
    vexMotorSet(MotorDriveForkliftL, 127);
    vexMotorSet(MotorDriveForkliftR, 127);
    vexSleep( 2000 );
                    
    vexMotorSet(MotorDriveWheelLF, 127);
    vexMotorSet(MotorDriveWheelLB, 127);
    vexMotorSet(MotorDriveWheelRF, -127);
    vexMotorSet(MotorDriveWheelRB, -127);
    vexSleep( 2500 );
                          
    vexMotorSet(MotorDriveForkliftTR, 50);
    vexMotorSet(MotorDriveForkliftTL, 50);
    vexSleep( 2500 );
    vexMotorSet(MotorDriveForkliftTL, 0);
    vexMotorSet(MotorDriveForkliftTL, 0);
    vexSleep( 1500 );
                
    
  }
 
  return (msg_t)0;
}



msg_t
vexOperator( void *arg )
{
  if (abs(vexControllerGet( Ch3 )) < HYSTERISIS)
  {
    vexMotorSet(MotorDriveWheelLF, 0);
    vexMotorSet(MotorDriveWheelLB, 0);
}
  if (abs(vexControllerGet( Ch2 )) < HYSTERISIS)
  {
    vexMotorSet(MotorDriveWheelRF, 0);
    vexMotorSet(MotorDriveWheelRB, 0);
  }
  if (abs(vexControllerGet( Ch3 )) < HYSTERISIS)
    {
    vexMotorSet(MotorDriveWheelBack, 0);
    }

        (void)arg;

        // Must call this
        vexTaskRegister("operator");

        // Run until asked to terminate
        while(!chThdShouldTerminate())
                {
                // flash led/digi out
                //vexDigitalPinSet( kVexDigital_1, (blink++ >> 3) & 1);

                // status on LCD of encoder and sonar
                //vexLcdPrintf( VEX_LCD_DISPLAY_2, VEX_LCD_LINE_1, "%4.2fV   %8.1f", vexSpiGetMainBattery() / 1000.0, chTimeNow() / 1000.0 );
                //vexLcdPrintf( VEX_LCD_DISPLAY_2, VEX_LCD_LINE_2, "L %3d R %3d", vexMotorGet( MotorDriveL ), vexMotorGet( MotorDriveR ) );

                // Tank drive
                // left drive
                vexMotorSet( MotorDriveWheelLF, vexControllerGet( Ch3 ) );
                vexMotorSet( MotorDriveWheelLB, vexControllerGet( Ch3 ) );

                // right drive
                int16_t RF = -1*vexControllerGet( Ch2);
                vexMotorSet( MotorDriveWheelRF, RF );
                vexMotorSet( MotorDriveWheelRB, RF );

                // back drive
                vexMotorSet( MotorDriveWheelBack, vexControllerGet( Ch1 ) );

                // forklift both forward
                if(vexControllerGet( Btn5U) )
                {
                   vexMotorSet( MotorDriveForkliftL, 127);
                   vexMotorSet( MotorDriveForkliftR, 127);
                }
                else
                {
                    if(vexControllerGet( Btn6U))
                {
                   vexMotorSet( MotorDriveForkliftL, -127);
                   vexMotorSet( MotorDriveForkliftR, -127);
                }
                else
                {
                   vexMotorSet( MotorDriveForkliftL, 0);
                   vexMotorSet( MotorDriveForkliftR, 0);
                }
                   
                }
                //forklift both backward
                

                //forklift front
                if(vexControllerGet( Btn5D) )
                {
                   vexMotorSet( MotorDriveForkliftTL, 50);
                   vexMotorSet( MotorDriveForkliftTR, 50);
                }
                else
                {
                   if(vexControllerGet( Btn6D ))
                {
                   vexMotorSet( MotorDriveForkliftTL, -127);
                   vexMotorSet( MotorDriveForkliftTR, -127);
                }
                else
                {
                   vexMotorSet( MotorDriveForkliftTR, 0);
                   vexMotorSet( MotorDriveForkliftTL, 0);
                }
                }

                // Don't hog cpu
                vexSleep( 25 );
                }



        return (msg_t)0;

}
